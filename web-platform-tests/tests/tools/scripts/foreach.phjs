/*

    foreach.phjs: $distribution_URI

    Copyright © 2012 World Wide Web Consortium, (Massachusetts
    Institute of Technology, European Research Consortium for
    Informatics and Mathematics, Keio University). All Rights
    Reserved. This work is distributed under the W3C® Software License
    [1] in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.

    [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231

    This program is intended to be executed using phantomjs [2].
 
    syntax: phantomjs foreach.phjs manifest.js <manifest.txt>

    Your_script.js defines a function __result_handler, which returns one of:
     - "WRAPPER:TRY_AGAIN"
       the return value is not yet available and the wrapper should retry
     - "WRAPPER:EXIT"
       the return value cannot be found and the wrapper should give up
     - a value
       a simple object, i.e. no function or closure.       

    [2] http://phantomjs.org/

*/

var system = require('system');
var fs = require('fs');

if (system.args.length < 3) {
    console.error('[error] foreach.phjs: Missing arguments');    
    console.error('[error]   use phantomjs foreach.phjs manifest.js <manifest.txt>');    
    phantom.exit(1);
}


var wrapperjs = system.args[1];

var tests = [];

function add_test(file) {
    tests.push(file);
}

for (var i = 2;i<system.args.length; i++) {
    var name = system.args[i];
    var file = fs.open(name, "r");
    var line;

    while ((line = file.readLine()) !== "") {
	add_test(line);
    }
}

function endsWith(ref, s) {
    var index = ref.lastIndexOf(s);
    return (index == (ref.length - s.length));
}


var results   = [];
var resources = [];

var got_results = 0;

function add_resource(uri, location, test_number) {
    if (typeof resources[test_number] === "undefined") {
	resources[test_number] = [];
    }
    if (!(endsWith(uri, "/resources/testharness.js")
	  || uri.indexOf(location) !== -1
	  || endsWith(uri, "/resources/testharnessreport.js"))) {
	//	var last_index = html.lastIndexOf
	resources[test_number].push(uri);
    }
}


function add_result(obj, location, test_number) {
    if (typeof resources[test_number] !== "undefined"
	&& resources[test_number].length > 0) {
	obj.resources = resources[test_number];
    }
    results[test_number] = obj;
    got_results++;
    //    if (got_results == tests.length) {
    //	console.log(JSON.stringify(results, undefined, 2));
    //	phantom.exit(0);
    //    }
}

// number of pages opened simultaneously
var got_open = 0;

function add_error(msg, location, test_number) {
    var err = new Object();
    err.error = msg;
    err.location  = location;    
    add_result(err, location, test_number);
}

var debug = false;

function execute_test(html, test_number) {
    var page = require('webpage').create();

    page.settings.userAgent = "foreach.phjs/1.0";
    
    page.onResourceRequested = function(request) {
	add_resource(request.url, html, test_number);	
    };
    
    page.onError = function (msg, trace) {
	if (debug) console.debug(msg);
    }

    page.onClosing = function(closingPage) {
	got_open--;
    };

    function result_handler(page, test_number, iter) {
	var result;
	try {
	    result = page.evaluate(function () {
		    return __result_handler(); 
		});
	} catch(e) {
	    add_error('[0] foreach.phjs: we crashed in flames', html, test_number);
	    page.close();
	}
	if (result === "WRAPPER:TRY_AGAIN") {
	    if (debug) console.debug("TRY AGAIN (" + iter + ")");
	    if (iter < 200) {
		window.setTimeout(function() { result_handler(page, test_number, ++iter); }, 200);
	    } else {
		try {
		    result = page.evaluate(function () {
			    return __give_up(); 
			});
		    add_result(result, html, test_number);
		    page.close();
		} catch(e) {
		    add_error('[1] foreach.phjs: we crashed in flames while giving up', html, test_number);
		    page.close();
		}
	    }
	} else if (result === "WRAPPER:EXIT") {
	    add_error('[2] foreach.phjs: giving up', html, test_number);
	    page.close();
	} else {
	    try {
		switch (typeof result) {
		case "string":
		    add_result('"' + result.replace('"', '\"') + '"', html, test_number);
	        break;
		case "boolean":
		case "number":
		case "undefined":
		    add_result(result, html, test_number);
	        break;
		case "object":
		    add_result(result, html, test_number);
		    break;
		default:
		    add_result(result, html, test_number);
		    break;
		}
		page.close();
	    } catch(e) {
		add_error("[3] " + e, html, test_number);
		page.close();
	    }
	}
    }
    var page_success = false;
    function give_up() {
	if (!page_success) {
	    add_error('[4] foreach.phjs: unable to load the page', html, test_number);
	    page.close();
	}
    }
    window.setTimeout(function() { give_up(); }, 50000);
    page.open(html, function (status) {
	    page_success = true;
	    if (status !== 'success') {
		add_error('[5] foreach.phjs: unable to open the page', html, test_number);
		page.close();
	    } else {
		var inject = page.injectJs(wrapperjs);
		if (inject) {
		    result_handler(page, test_number, 0);	    
		} else {
		    add_error('[6] foreach.phjs: unable to inject script', html, test_number);
		    page.close();
		}
	    }
	});
}


function execute(previous, start, end) {
    var MAX_OPEN = 1;
    if (debug) MAX_OPEN = 1;

    if (got_open > 0) {
	if (debug) console.debug("GOT_OPEN = " + got_open);
	window.setTimeout(function() { execute(previous, start, end); }, 1000);	
	return;
    }
    if (previous == 0) {
	console.log("[");
    }
    for (var i = previous; i < start; i++) {
    	console.log(JSON.stringify(results[i], undefined, 2));
	if (i < (end - 1)) {
	    console.log(",");
	}
    }    
    if (start >= end) {
	console.log("]");
	phantom.exit(0);
	return;
    }
    // don't open more than MAX_OPEN at a time
    for (var i = start; (i < end) && i < (start + MAX_OPEN); i++) {
	got_open++;
	if (debug) console.debug("OPENING = " + tests[i]);
	execute_test(tests[i], i);
    }
    window.setTimeout(function() { execute(start, start+MAX_OPEN, end); }, 500);	    
}

execute(0, 0, tests.length);
