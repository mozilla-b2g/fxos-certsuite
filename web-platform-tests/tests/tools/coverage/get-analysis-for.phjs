/*global phantom*/

var page = require("webpage").create()
,   system = require("system")
,   url
,   debug = false
;

if (system.args.length === 1) {
    console.log("[ERROR] URL argument required.");
    phantom.exit();
}
else {
    url = system.args[1];
}

page.onConsoleMessage = function (msg) {
    if (debug) console.log(msg);
};

page.open(url, function (status) {
    if (status !== "success") {
        console.log("[ERROR] Failed to load page");
        phantom.exit();
    }
    
    page.includeJs("https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js", function () {
        var toc = page.evaluate(function () {
            var tocList = [];
            function walkToC ($, $el, list, level) {
                level++;
                $el.find("> li").each(function () {
                    var $li = $(this)
                    ,   $a = $li.find("> a").first()
                    ;
                    var href = $a.attr("href").replace(/^.*#/, "")
                    ,   def = {
                            id: href.toLowerCase()
                                    .replace(/[^a-z0-9\-]/g, "-")
                                    .replace(/\-{2,}/g, "-")
                                    .replace(/(?:^\-|\-$)/g, "")
                        ,   original_id: href
                        ,   level:  level
                        }
                    ,   $list = $li.find("> ol").first()
                    ;
                    $list = $list.length ? $list : $li.find("> ul").first();
                    list.push(def);
                    if ($list.length && level < 3) {
                        walkToC($, $list, list, level);
                    }
                });
            }
            
            function processTocForRanges (tocList) {
                for (var i = 0, n = tocList.length; i < n; i++) {
                    var section = tocList[i]
                    ,   level = section.level
                    ;
                    section.end_id = null;
                    for (var j = i + 1, m = tocList.length; j < m; j++) {
                        var next = tocList[j];
                        if (next.level === level || next.level < level) {
                            section.end_id = next.original_id;
                            break;
                        }
                    }
                }
            }
            
            function nodeOrParent (node, id) {
                if (!node) console.log("Node '%s' is null", id);
                if (!node.parentNode) console.log("Node '%s' has no parent", id);
                if (node.parentNode.tagName.toLowerCase() === "div" && node.parentNode.classList.contains("impl")) {
                    node = node.parentNode;
                }
                return node;
            }
            
            function getElement(id) {
              return document.getElementById(id) || document.querySelector("*[name=\"" + id + "\"]");
            }
            
            function getRangeForSection (section) {
                var range = document.createRange()
                ,   start = nodeOrParent(getElement(section.original_id), section.original_id)
                ;
                range.setStartBefore(start);
                if (section.end_id) {
                    var end = nodeOrParent(getElement(section.end_id));
                    range.setEndBefore(end);
                }
                else {
                    range.setEndAfter(document.documentElement);
                }
                return range;
            }

            function getClonesForSection (section) {
                var div = document.createElement("div")
                ,   df = getRangeForSection(section).cloneContents()
                ;
                while (df.firstChild) div.appendChild(df.firstChild);
                return div;
            }

            // process ToC
            
            var $toc = $("body > ol.toc").first();
            $toc = $toc.length ? $toc : $("body > ul.toc").first(); // CSS 3
            $toc = $toc.length ? $toc : $("body > .subtoc > ul.toc").first(); // CSS 2
            $toc = $toc.length ? $toc : $("body > div > ol.toc").first(); // WAI-ARIA
            $toc = $toc.length ? $toc : $("#toc > div.toc > ul").first(); // FileAPI and others?
            $toc = $toc.length ? $toc : $("#toc > ul.toc").first(); // IndexedDb and others?
            
            walkToC($, $toc, tocList, 0);
            processTocForRanges(tocList);
            
            // remove non-normative sections from the document
            var dels = [];
            $("p:contains('This section is non-normative.')").prev().each(function () {
                var id = $(this).attr("id");
                for (var i = 0, n = tocList.length; i < n; i++) {
                    if (tocList[i].id === id) {
                        dels.push(getRangeForSection(tocList[i]));
                        var spliceSize = 1;
                        for (var j = i + 1, m = tocList.length; j < m; j++) {
                            if (tocList[j].level > tocList[i].level) spliceSize++;
                            else break;
                        }
                        tocList.splice(i, spliceSize);
                        break;
                    }
                }
            });
            dels.forEach(function (d) {
                d.deleteContents();
            });
            
            // we now need to recompute the ranges
            processTocForRanges(tocList);

            // turn ranges to DFs
            for (var i = 0, n = tocList.length; i < n; i++) {
                var section = tocList[i]
                ,   $df = $(getClonesForSection(section));

                // remove non-normative content inside DFs
                $df.find(".example, .domintro, .note").remove();

                // count webidl complexity (then remove webidls)
                var idl = $df.find(".idl:not(.extract)")
                               .text()
                               .replace(/\/\/.*$/gm, "")
                               .replace(/^\s*$/gm, "")
                               .replace(/^\s*\}\s*;\s*$/gm, "");
                section.idlComplexity = idl ? idl.split("\n").length : 0;
                $df.find(".idl").remove();

                // count propdef complexity (then remove propdefs)
                var propdef = $df.find(".propdef tr").length;
                propdef = propdef ? propdef-1 : 0;
                section.propdef = propdef;
                $df.find(".propdef").remove();

                // count words
                section.wordCount = $df.text() ? $df.text().split(/\s+/).length : 0;

                // count "ol li"
                section.algorithmicSteps = $df.find("ol li").length;
                
                // count normative statements
                var norms = $df.text().match(/\b(should|must|may)\b/g);
                section.normativeStatements = norms ? norms.length : 0;
            }
            return tocList;
        });
        console.log(JSON.stringify(toc));
        phantom.exit();
    });
    
});
